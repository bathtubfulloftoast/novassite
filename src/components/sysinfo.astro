---
import os from 'os';


var now = new Date();
var dd = String(now.getDate()).padStart(2, '0');
var mm = String(now.getMonth() + 1).padStart(2, '0'); //January is 0!
var yyyy = now.getFullYear();

var hours = String((now.getHours())).padStart(2, '0');

var minutes = String((now.getMinutes()) % 60).padStart(2, '0');
let seconds = now.getSeconds();

const currentTimeZone = '(' + new Date().toString().match(/\(([A-Za-z\s].*)\)/)[1] + ')';

const year = new Date().getFullYear();
const copyright = `Novas Site Â©${year}`;
const currentdate = mm + '/' + dd + '/' + yyyy + ' ' + hours + ':' + minutes + ' '+ currentTimeZone;

let distro;

const architecture = os.arch() ?? "Unknown Architecture"; // x64
const platform = os.platform() ?? "Unknown Platform"; // linux
const hostname = os.hostname() ?? "Computer"; //supernova

function getLinuxDistro() {
    try {
        const releaseInfo = fs.readFileSync('/etc/os-release', 'utf-8');
        const match = releaseInfo.match(/^NAME="([^"]*)"/m);
        return match ? match[1] : 'Generic Linux';
    } catch (err) {
        return 'Generic Linux';
    }
}

function getDevice() {
    try {
        const releaseInfo = fs.readFileSync('/sys/devices/virtual/dmi/id/product_name', 'utf-8');
        return releaseInfo ?? 'Unknown Device';
    } catch (err) {
        return 'Unknown Device';
    }
}

if(platform == "linux") {
    distro = getLinuxDistro();
} else {
    distro = platform;
}

const device = getDevice();

---
<div class="blurb">
<b>System Info:</b><br>
compiled on {currentdate}<br>
compiled on <a href="/deviceinfo.json" target="_top">{hostname} using {distro} {architecture}</a><br>
<a id="version" target="_top">uhhh update</a>
</div>

<script>
document.addEventListener("DOMContentLoaded", async function() {

let response = "error: response unset";
let counter = 0;
let found = false;

async function weather() {
const commitResponse = await fetch('/commitID.txt');
const currentCommit = await commitResponse.text();
// const currentCommit = "541b863ca5e89c49500a4ec86b53a9dee7bfd4d5";

const githubResponse = await fetch('https://api.github.com/repos/bathtubfulloftoast/novassite/commits');
// const githubResponse = await fetch('/commits.json');
const hubCommit = await githubResponse.json();

console.log()

for (var item of hubCommit) {
counter++;
if (item.sha === currentCommit) {
found = true;
break;
}
}

if(found) {
if(counter != 1) {
response = `sites is on outdated version: ${currentCommit.slice(0, 7)} ${counter-1} commit${(counter-1 > 1 ? 's' : '')} behind current version ${hubCommit[0].sha.slice(0,7)}`;
}
else if (counter == 1) {
response = `site is on current version: ${currentCommit.slice(0, 7)}`;
}
} else {
response = `site is on development version: ${currentCommit.slice(0, 7)} latest public release is ${hubCommit[0].sha.slice(0,7)}`;
}

document.getElementById("version").innerHTML = response;
document.getElementById("version").href = `https://github.com/bathtubfulloftoast/novassite/commit/${currentCommit}`;
}
await weather();
});
</script>
